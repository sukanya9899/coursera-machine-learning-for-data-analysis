# -*- coding: utf-8 -*-
"""assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G28uSnNVfrp_f2sb6pePPPUsZ-HDswgG
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pylab as plt
from sklearn.model_selection import train_test_split
from sklearn import  datasets
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.decomposition import PCA
import seaborn as sns
# %matplotlib inline

rnd_state = 3927

iris = datasets.load_iris()
data = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                     columns= iris['feature_names'] + ['target'])
data.head()

data.info()

data.describe()

pca_transformed = PCA(n_components=2).fit_transform(data.iloc[:, :4])

colors=["#9b59b6", "#e74c3c", "#2ecc71"]
plt.figure(figsize=(12,5))
plt.subplot(121)
plt.scatter(list(map(lambda tup: tup[0], pca_transformed)),
            list(map(lambda tup: tup[1], pca_transformed)), 
            c=list(map(lambda col: "#9b59b6" if col==0 else "#e74c3c" if col==1 else "#2ecc71", data.target)))
plt.title('PCA on Iris data')

plt.subplot(122)
sns.countplot(data.target, palette=sns.color_palette(colors))
plt.title('Countplot Iris classes');

(predictors_train, predictors_test,
 target_train, target_test) = train_test_split(data.iloc[:, :4], data.target, test_size = .3, random_state = rnd_state)

classifier = KMeans(n_clusters=3).fit(predictors_train)
prediction = classifier.predict(predictors_test)

pca_transformed = PCA(n_components=2).fit_transform(predictors_test)

prediction = np.where(prediction==1, 3, prediction)
prediction = np.where(prediction==2, 1, prediction)
prediction = np.where(prediction==3, 2, prediction)

plt.figure(figsize=(12,5))
plt.subplot(121)
plt.scatter(list(map(lambda tup: tup[0], pca_transformed)),
            list(map(lambda tup: tup[1], pca_transformed)), 
            c=list(map(lambda col: "#9b59b6" if col==0 else "#e74c3c" if col==1 else "#2ecc71", target_test)))
plt.title('PCA on Iris data, real classes');

plt.subplot(122)
plt.scatter(list(map(lambda tup: tup[0], pca_transformed)),
            list(map(lambda tup: tup[1], pca_transformed)), 
            c=list(map(lambda col: "#9b59b6" if col==0 else "#e74c3c" if col==1 else "#2ecc71", prediction)))
plt.title('PCA on Iris data, predicted classes');

clust_df = predictors_train.reset_index(level=[0])
clust_df.drop('index', axis=1, inplace=True)
clust_df['cluster'] = classifier.labels_

clust_df.head()

print ('Clustering variable means by cluster')
clust_df.groupby('cluster').mean()

print('Confusion matrix:\n', pd.crosstab(target_test, prediction, colnames=['Actual'], rownames=['Predicted'], margins=True))
print('\nAccuracy: ', accuracy_score(target_test, prediction))